/**
 * 适配器模式
 * 
 * 什么是适配器模式？
 * 适配器模式是一种用于解决问题（亡羊补牢）的设计模式，用于解决两个已有接口不匹配的问题
 * 
 * 总结
 * 1. 适配器模式主要用来解决两个已有接口之间不匹配的问题，它不考虑这些接口是怎样实现的，也不考虑它们将来可能会如何演化。
 * 适配器模式不需要改变已有的接口，就能够使它们协同作用。
 * 2. 装饰者模式和代理模式也不会改变原有的对象的接口，但装饰者模式的作用是为了给对象增加功能。
 * 装饰者模式常常形成一条长的装饰链，而适配器模式通常只包装一次。代理模式是为了控制对对象的访问，通常也只包装一次。
 * 3. 外观模式的作用倒是和适配器比较相似，有人把外观模式看成一组对象的适配器，但外观模式最显著的特点是定义了一个新的接口。
 * 
 * 实例
 * 刚开始某个接口传给后端的是一个对象，后来后端另一个接口也需要这个数据，但是需要json格式
 */

function doSomeThing() {
  let params = {}

  // 1. 用户操作后修改了params
  params = { a: 'a' }
  // 2. 传给后端
  //------修改-----
  send(stringify(params))
}

function send(data) {
  // 传给后端
  // ...
  return data
}

function stringify(odj) {
  return JSON.stringify(odj)
}